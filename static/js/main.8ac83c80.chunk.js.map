{"version":3,"sources":["contexts/ThemeContext.js","contexts/AuthContext.js","reducers/BookReducer.js","contexts/BookContext.js","components/navbar.js","components/BookForm.js","components/BookDetails.js","components/Booklist.js","App.js","index.js"],"names":["ThemeContext","createContext","AuthContext","Component","BookReducer","state","action","type","title","book","author","id","Math","floor","random","filter","BookContext","BookContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","books","dispatch","useEffect","setItem","stringify","Provider","value","children","Navbar","useContext","length","BookForm","useState","setTitle","setAuthor","onSubmit","e","preventDefault","onChange","target","placeholder","BookDetails","onClick","className","BookList","map","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAEaA,EAAeC,0BCDfC,GDKsBC,YCLRF,2B,GAEOE,Y,cCYnBC,EAfK,SAACC,EAAOC,GACxB,OAAQA,EAAOC,MACX,IAAK,WACA,MAAM,GAAN,mBAAWF,GAAX,CAAkB,CACnBG,MAAOF,EAAOG,KAAKD,MACnBE,OAAQJ,EAAOG,KAAKC,OACpBC,GAAGC,KAAKC,MAAoB,IAAdD,KAAKE,aAEvB,IAAK,cACD,OAAOT,EAAMU,QAAO,SAACN,GAAD,OAAUA,EAAKE,KAAOL,EAAOK,MACrD,QACI,OAAON,ICRNW,EAAcf,0BAgBZgB,EAda,SAACC,GAAW,IAAD,EACTC,qBAAWf,EAAa,IAAI,WAClD,IAAMgB,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,MAHZ,mBAC5BK,EAD4B,KACrBC,EADqB,KAQnC,OAHAC,qBAAU,WACNN,aAAaO,QAAQ,QAASL,KAAKM,UAAUJ,MAC/C,CAACA,IAEC,cAACT,EAAYc,SAAb,CAAsBC,MAAO,CAAEN,QAAMC,YAArC,SACCR,EAAMc,YC4BAC,EAVD,WAAK,IACRR,EAAOS,qBAAWlB,GAAlBS,MACP,OACQ,gCACA,mDACA,4DAA+BA,EAAMU,OAArC,mBCPGC,EA5BE,WAAO,IACZV,EAAaQ,qBAAWlB,GAAxBU,SADW,EAEOW,mBAAS,IAFhB,mBAEZ7B,EAFY,KAEL8B,EAFK,OAGSD,mBAAS,IAHlB,mBAGZ3B,EAHY,KAGJ6B,EAHI,KAmBnB,OACI,uBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACFhB,EAAS,CACLnB,KAAM,WACNE,KAAM,CAAED,QAAOE,YAEnB4B,EAAS,IACTC,EAAU,KAGV,UACI,uBAAOI,SAjBW,SAACF,GACvBH,EAASG,EAAEG,OAAOb,QAgBsBxB,KAAK,OAAOwB,MAAOvB,EAAOqC,YAAY,oBAC1E,uBAAOF,SAfY,SAACF,GACxBF,EAAUE,EAAEG,OAAOb,QAcsBxB,KAAK,OAAOwB,MAAOrB,EAAQmC,YAAY,sBAC5E,wBAAQtC,KAAK,SAAb,8BCdGuC,EAVK,SAAC,GAAc,IAAZrC,EAAW,EAAXA,KACXiB,EAAaQ,qBAAWlB,GAAxBU,SAER,OACI,qBAAkBqB,QAAS,kBAAMrB,EAAS,CAAEnB,KAAM,cAAeI,GAAIF,EAAKE,MAA1E,UACA,qBAAKqC,UAAU,QAAf,SAAyBvC,EAAKD,QAC9B,qBAAKwC,UAAU,SAAf,SAA0BvC,EAAKC,WAFtBD,EAAKE,KCyCPsC,EArBE,WAAO,IACZxB,EAAUS,qBAAWlB,GAArBS,MACR,OAAOA,EAAMU,OACT,sBAAKa,UAAU,YAAf,UACI,6BACKvB,EAAMyB,KAAI,SAACzC,GACR,OACI,cAAC,EAAD,CAAaA,KAAMA,SAI/B,cAAC,EAAD,OAGA,qCACA,qBAAKuC,UAAU,QAAf,8CACI,cAAC,EAAD,QCzBDG,MAXf,WACE,OACE,qBAAKH,UAAU,MAAf,SACE,eAAC,EAAD,WACI,cAAC,EAAD,IACA,cAAC,EAAD,UCNVI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8ac83c80.chunk.js","sourcesContent":["import React, { createContext,Component } from 'react';\r\n\r\nexport const ThemeContext = createContext();\r\n\r\n\r\n//a context provider always needs to be created with any context that we create because this provides the context to the chosen components\r\nclass ThemeContextProvider extends Component {\r\n    state = {               //this is the data that we want to share with our components\r\n        isLightTheme: true,\r\n        light: { syntax: \"#555\", ui: '#ddd', bg: '#eee' },\r\n        dark:{syntax:'#ddd',ui:'#333',bg:'#555'}\r\n    }\r\n    themeToggle = () => {\r\n        this.setState({ isLightTheme: !this.state.isLightTheme });\r\n    }\r\n    \r\n    render() { \r\n        /*the CONTEXT_NAME.PROVIDER element is the real stuff that does the job of sharing the data of the context,\r\n        the value property represents whatever data that we want to provide to the components*/\r\n        return (<ThemeContext.Provider value={{...this.state,themeToggle:this.themeToggle}}>\r\n            {this.props.children}\r\n        </ThemeContext.Provider>);\r\n    }\r\n}\r\n \r\nexport default ThemeContextProvider;\r\n","import React, { Component,createContext } from 'react';\r\nexport const AuthContext = createContext();\r\n\r\nclass AuthContextProvider extends Component {\r\n    state = {\r\n        isAuthenticated: false,\r\n    }\r\n    toggleAuth = () => {\r\n        this.setState({ isAuthenticated:!this.state.isAuthenticated });\r\n    }\r\n    render() {\r\n        return (\r\n            <AuthContext.Provider value={{ ...this.state, toggleAuth: this.toggleAuth }}>\r\n                {this.props.children} \r\n            </AuthContext.Provider> \r\n        );\r\n    }\r\n}\r\n\r\nexport default AuthContextProvider;   ","const BookReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_BOOK':\r\n             return [...state, {\r\n            title: action.book.title,\r\n            author: action.book.author,\r\n            id:Math.floor(Math.random()*10000)\r\n        }]\r\n        case 'REMOVE_BOOK':\r\n            return state.filter((book) => book.id !== action.id)\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default BookReducer;","import React, { createContext,useReducer,useEffect } from 'react';\r\nimport BookReducer from '../reducers/BookReducer';\r\n\r\nexport const BookContext = createContext();\r\n\r\nconst BookContextProvider = (props) => {\r\n    const [books, dispatch] = useReducer(BookReducer, [], () => {\r\n        const localData = localStorage.getItem('books');\r\n        return localData ? JSON.parse(localData) : [];\r\n    });\r\n    useEffect(() => {\r\n        localStorage.setItem('books', JSON.stringify(books));\r\n    },[books]);\r\n    return (\r\n        <BookContext.Provider value={{ books,dispatch}}>\r\n        {props.children}\r\n        </BookContext.Provider>\r\n    )\r\n}\r\nexport default BookContextProvider;","import React, { Component,useContext,useState } from 'react';\r\nimport { ThemeContext } from '../contexts/ThemeContext';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\n//this is how we can use multiple contexts in the class components\r\n// class Navbar extends Component {\r\n//    // static contextType = ThemeContext;\r\n//     render() {\r\n//         return (\r\n//             <AuthContext.Consumer>{(authContext) => (\r\n//                 <ThemeContext.Consumer>{(themeContext) => {\r\n//                     const { isLightTheme, light, dark } = themeContext;\r\n//                     const { isAuthenticated, toggleAuth } = authContext;\r\n//                     const theme = isLightTheme ? light : dark;\r\n//                     return (\r\n//                           <nav style={{ background: theme.ui, color: theme.syntax }}>\r\n//                             <h1>Context app</h1>\r\n//                             <div onClick={toggleAuth}>\r\n//                                 {isAuthenticated?'Logged in!':'Logged Out!'}\r\n//                             </div>\r\n//                             <ul>\r\n//                                 <li>Home</li>\r\n//                                 <li>About</li>\r\n//                                 <li>Contact</li>\r\n//                             </ul>\r\n//                         </nav>\r\n//                     );\r\n//                 }}</ThemeContext.Consumer>\r\n//             )}</AuthContext.Consumer>\r\n//    );\r\n// }\r\n// } \r\nconst Navbar =()=>{\r\n    const {books}=useContext(BookContext);\r\n    return (\r\n            <nav>\r\n            <h1>The Best BookList</h1>\r\n            <p>Currently you have to read {books.length} books...</p>\r\n        </nav>\r\n    );\r\n}\r\n \r\nexport default Navbar ;","import React, { useState, useContext } from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\nconst BookForm = () => {\r\n    const { dispatch } = useContext(BookContext);\r\n    const [title, setTitle] = useState('');\r\n    const [author, setAuthor] = useState('');\r\n    const handleTitleChange = (e) => {\r\n        setTitle(e.target.value);\r\n    }\r\n    const handleAuthorChange = (e) => {\r\n        setAuthor(e.target.value);\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        dispatch({\r\n            type: 'ADD_BOOK',\r\n            book: { title, author }\r\n         });\r\n        setTitle('');\r\n        setAuthor('');  \r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input onChange={handleTitleChange} type=\"text\" value={title} placeholder=\"Enter Book name\"/>\r\n            <input onChange={handleAuthorChange} type=\"text\" value={author} placeholder=\"Enter Author name\" />\r\n            <button type=\"submit\">add new book</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default BookForm;","import React, { useContext } from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\nconst BookDetails = ({ book }) => {\r\n    const { dispatch } = useContext(BookContext);\r\n    //console.log(book.id);\r\n    return (\r\n        <li key={book.id} onClick={() => dispatch({ type: 'REMOVE_BOOK', id: book.id })}>\r\n        <div className=\"title\">{ book.title}</div>\r\n        <div className=\"author\">{ book.author}</div>\r\n    </li> );\r\n}\r\n \r\nexport default BookDetails;","import React, { Component,useContext,useState } from 'react';\r\nimport { ThemeContext } from '../contexts/ThemeContext';\r\nimport { BookContext } from '../contexts/BookContext';\r\nimport BookForm from './BookForm';\r\nimport BookDetails from './BookDetails';\r\n\r\n//this is how we use context with the class components\r\n\r\n// class BookList extends Component {\r\n//  static contextType = ThemeContext;\r\n//     render() { \r\n//         const { isLightTheme, light, dark } = this.context;\r\n//         const theme = isLightTheme ? light :dark;\r\n//         return ( \r\n//             <div className=\"book-list\" style={{background:theme.bg,color:theme.syntax}}>\r\n//                 <ul>\r\n//                     <li style={{background:theme.ui}}>the immortals of meluha</li>\r\n//                     <li style={{background:theme.ui}}>the secret of the nagas</li>\r\n//                     <li style={{background:theme.ui}}>the oath of the vayuputras</li>\r\n//                 </ul>\r\n//             </div>\r\n//          );\r\n//     }\r\n// }\r\n\r\n//this is how we use context with the useContext hook in the functional components.\r\nconst BookList = () => {\r\n    const { books } = useContext(BookContext);\r\n    return books.length ? (\r\n        <div className=\"book-list\">\r\n            <ul>\r\n                {books.map((book) => {\r\n                    return (\r\n                        <BookDetails book={book}/>\r\n                    )\r\n                })}\r\n            </ul>\r\n            <BookForm />\r\n        </div>\r\n    ) : (\r\n            <>\r\n            <div className=\"empty\">No books to read,Hello free time</div>   \r\n                <BookForm />  \r\n            </>    \r\n    );\r\n   }\r\n \r\nexport default BookList;","import React from 'react';\nimport Navbar from './components/navbar';\nimport BookList from './components/Booklist';\nimport ThemeContextProvider from './contexts/ThemeContext';\nimport ThemeToggle from './components/ThemeToggle';\nimport BookContextProvider from './contexts/BookContext';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n          <Navbar />\n          <BookList />\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}